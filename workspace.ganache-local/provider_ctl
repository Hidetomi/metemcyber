#! /bin/bash

for f in metemcyber_common.sh; do
    [ -f "${f}" ] && . "${f}"
done

function usage() {
    cat <<EOD | sed -e "s/^  //" >&2
  Usage: $0 <init|start|stop|kill> [ARGS]
  ARGS:
    noisy:      available with 'start'. outputs from ganache-cli will be shown.

EOD
    exit 255
}

## parse options.

while getopts 'qh' OPT; do
    case ${OPT} in
    h|?) usage;;
    esac
done
shift $((${OPTIND} - 1))

## parse args.
command=$1
shift
for arg in $*; do
    case "${arg}" in
        noisy)  flg_noisy=1;;
    esac
done

## check requirements.
for req_cmd in jq ganache-cli; do
    type "${req_cmd}" 2>&1 >/dev/null
    [ $? -ne 0 ] && echo >&2 "command not found: ${req_cmd}" && exit 255
done

## check inheritance.
if [ -z ${ENV_FILE} ] || [ -z ${WORKSPACE} ]; then
    echo >&2 "internal error: ENV_FILE or WORKSPACE is not inherited."
    exit 255
fi
[ -f "${ENV_FILE}" ] && source "${ENV_FILE}"


## output files.
accounts_json="${WORKSPACE}/tmp_accounts.json"
accounts_list="${WORKSPACE}/ganache_accounts.list"
ganache_pidfile="${WORKSPACE}/ganache.pid"

container_network=metemcyber-ganache-local # needed by client containers.

## ganache-cli initial settings.
ganache_port=48545
network_id=105777
# fake mnemonic. BIP39 does not have any word start with 'x'...
mnemonic="tango hotel romeo echo alpha tango india xray delta echo mike oscar"
num_accounts=3 # alice, bob, carol.
defEth=409600 # default ETH at initialize chain.
#defWeiHex=0x56bc75e2d63100000000 # 409600Eth
defWeiHex=0x0 # should be overwritten by saved transactions.
dbpath=${WORKSPACE}/ganache_data

host_ipaddr=`ip addr show | grep -w inet | grep "scope global" | grep -v " docker" \
    | head -1 | sed -e "s!^.*inet \([0-9.]*\).*!\1!"`

## Note: do not set ${host_ipadr} for host option.
ganache_cmd="ganache-cli \
    --host 0.0.0.0 \
    --port ${ganache_port} \
    --mnemonic '${mnemonic}' \
    --networkId ${network_id} \
    --db ${dbpath}"


CMD_PGREP="pgrep --parent $$ --newest --full --list-full ganache-cli"

function stop_ganache() {
    if [ ! -f "${ganache_pidfile}" ]; then
        echo >&2 "pidfile not found: ${ganache_pidfile}"
        echo >&2 "not running, or out of control."
        return 0
    fi
    echo >&2 "terminating process: `cat ${ganache_pidfile}`"
    pkill --exact -F "${ganache_pidfile}"
    rm -f "${ganache_pidfile}"
}

function init_ganache() {
    # clear ganache data.
    rm -rf "${dbpath}" || exit 255
    mkdir "${dbpath}" || exit 255
    echo "setting up accounts"
    # start ganache-cli only for getting ${accounts_json}.
    ${ganache_cmd} -a ${num_accounts} -e ${defEth} --acctKeys "${accounts_json}" &
    uri="http://${host_ipaddr}:${ganache_port}"
    wait_provider_ready "${uri}" || exit 255
    kill -TERM $!

    # clear old settings.
    : > "${ENV_FILE}"
    # add network settings.
    cat <<EOD | sed -e "s/^ *//" >> "${ENV_FILE}"
    DOCKER_NETWORK=${container_network}
    PROVIDER_HOST=${host_ipaddr}
    PROVIDER_PORT=${ganache_port}
    PROVIDER_FROM_LOCAL=http://localhost:${ganache_port}
EOD
    # add account settings.
    ( jq .private_keys "${accounts_json}" \
        | tr -d ' {},"' | grep -v "^$" | tr ":" "\n" \
        | sed -e "1s/^/ALICE_EOA_ADDRESS=/" \
              -e "2s/^/ALICE_PRIVATE_KEY=/" \
              -e "3s/^/BOB_EOA_ADDRESS=/" \
              -e "4s/^/BOB_PRIVATE_KEY=/" \
              -e "5s/^/CAROL_EOA_ADDRESS=/" \
              -e "6s/^/CAROL_PRIVATE_KEY=/" \
        >> "${ENV_FILE}" \
    ) || exit 255
    echo "== generated environments file: ${ENV_FILE}"
    cat "${ENV_FILE}"
    echo "=="
    # create accounts list.
    ( jq .private_keys[] "${accounts_json}" \
        | tr -d '"' \
        | sed -e "s/^/0x/g" \
              -e "s/$/,${defWeiHex}/g" \
        > "${accounts_list}" \
    ) || exit 255
}

function start_ganache() {
    if [ -f "${ganache_pidfile}" ]; then
        pgrep -af ganache-cli | grep -q "`cat \"${ganache_pidfile}\"`"
        [ $? -eq 0 ] && echo "ganache-cli is already running" && return 0
    fi
    # check number of initialized accounts.
    num=`grep "^0x" "${accounts_list}" 2>/dev/null | wc -l`
    if [ ${num} -lt ${num_accounts} ]; then
        echo >&2 "not yet initialized."
        exit 255;
    fi
    # gen account options
    account_opts=""
    while read line; do
        account_opts="${account_opts} --account=${line}"
    done < "${accounts_list}"

    echo "starting ganache container"
    [ "${flg_noisy}" != "1" ] && opt_q="-q"
    cmd="${ganache_cmd} ${account_opts} ${opt_q}"
    echo ${cmd}
    exec ${cmd} &

    uri="http://${host_ipaddr}:${ganache_port}"
    wait_provider_ready "${uri}" || exit 255
    ${CMD_PGREP} > "${ganache_pidfile}"
}

function cleanup_data() {
    echo "cleaning up ganache data."
    rm -f "${accounts_json}" "${accounts_list}"
    rm -rf "${dbpath}"
    rm -f "${ENV_FILE}"
}


case "${command}" in
    init)
        stop_ganache
        cleanup_data
        init_ganache
        ;;
    start)
        start_ganache
        ;;
    stop)
        stop_ganache
        ;;
    kill)
        stop_ganache
        cleanup_data
        ;;
    *)
        usage
        ;;
esac
